import collections
import json

import requests
from constance import config
from django.conf import settings

from projects.models import Project, Supervisor, TelegramBot
from telegram.api.types import Message

context = settings.FSM_CONTEXT


telegram_api_url = config.TELEGRAM_API_URL
master_bot_telegram_token = config.MASTER_BOT_TOKEN
base_hook_url = config.BASE_HOOK_URL
url = f"{telegram_api_url}{master_bot_telegram_token}"


def handle_update(update):
    message = Message.from_json(update)
    route(message)


def route(message: Message):
    context = get_context(message)
    curent_state = context["state"]

    if message.text and message.text.startswith("/context"):
        send_message(message.chat.id, text=context)
    elif (
        curent_state == "default" and message.text and message.text.startswith("/start")
    ):
        process_start_command(message, context)
    elif message.text and message.text.startswith("/cancel"):
        context["state"] = "default"
        context["data"] = {}
        send_message(
            message.chat.id,
            text="–ü–æ–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –ø—Ä–æ—Å—Ç–∏—Ç—å...\n–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!",
        )
    else:
        states[curent_state](message, context)


def process_start_command(message: Message, context):
    supervisor = find_supervisor(message.from_user.telegram_id)
    if supervisor:
        # TODO: Do something if supervisor is already registered
        text = f"–ü—Ä–∏–≤–µ—Ç, {supervisor.name}! –Ø —Ç–µ–±—è –∑–Ω–∞—é!\n–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏ –±–æ–µ–≤—ã–º –±–æ—Ç–∞–º–∏."
        send_message(message.chat.id, text)
    else:
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è, —è —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é ü§î\n"
            "–î–∞–≤–∞–π, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –∫–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è:"
        )
        send_message(message.chat.id, text)
        context["state"] = "waiting_name"


def send_message(chat_id, text, reply_markup=None):
    params = {"chat_id": chat_id, "text": text}
    if reply_markup:
        params["reply_markup"] = json.dumps(reply_markup)
    response = requests.post(f"{url}/sendMessage", params=params, timeout=5)
    print(response.json())


def process_waiting_phone_number_state(message: Message, context):
    if message.from_user.phone_number:
        context["data"]["phone_number"] = message.from_user.phone_number
        context["state"] = "waiting_testbot_token"
        send_message(
            message.chat.id, "–°–ø–∞—Å–∏–±–æ!\n\n–ù–∞–ø–∏—à–∏—Ç–µ API –∫–ª—é—á –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
    elif len(message.text) >= 11 and len(message.text) < 20:
        context["data"]["phone_number"] = message.text
        context["state"] = "waiting_testbot_token"
        send_message(
            message.chat.id, "–°–ø–∞—Å–∏–±–æ!\n\n–ù–∞–ø–∏—à–∏—Ç–µ API –∫–ª—é—á –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
    else:
        send_message(
            message.chat.id,
            "–•–º–º... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.",
        )


def process_waiting_name_state(message: Message, context):
    context["data"]["name"] = message.text

    if message.from_user.phone_number:
        context["data"]["phone_number"] = message.from_user.phone_number
        context["state"] = "waiting_testbot_token"
        send_message(
            message.chat.id, "–°–ø–∞—Å–∏–±–æ!\n\n–ù–∞–ø–∏—à–∏—Ç–µ API –∫–ª—é—á –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
    else:
        send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ!\n –ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–≤–æ—è –æ–¥–µ–∂–¥–∞, –∫–ª—é—á–∏ –∏ –º–æ—Ç–æ—Ü–∏–∫–ª",
        )
        send_message(message.chat.id, "–û–π... –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n")

        text = "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        reply_markup = {
            "keyboard": [
                [{"text": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "request_contact": True}]
            ],
            "one_time_keyboard": True,
            "resize_keyboard": True,
        }
        send_message(message.chat.id, text, reply_markup)
        context["state"] = "waiting_phone_number"


def process_waiting_prodbot_token(message: Message, context):
    token = message.text.strip()
    result = check_token(token)
    if result["ok"]:
        context["data"]["prodbot_token"] = token
        context["state"] = "initialize_project"
    else:
        error = result["description"]
        text = (
            f"–í–∞—à —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error}\n\n"
            "–ï—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ API –∫–ª—é—á –±–æ–µ–≤–æ–≥–æ –±–æ—Ç–∞:"
        )
        send_message(message.chat.id, text)

    create_supervisor(message, context)


def process_unknown_state(message, context):
    send_message(message.chat.id, "unknown state")


def process_waiting_testbot_token(message: Message, context):
    token = message.text.strip()
    result = check_token(token)
    print(result)
    if result["ok"]:
        context["data"]["testbot_token"] = token
        context["state"] = "waiting_prodbot_token"
        text = (
            "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –í—ã –≤–≤–µ–ª–∏ —Å—Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –æ—à–∏–±–ª–∏—Å—å! –í—ã —Ç–æ—á–Ω–æ —á–µ–ª–æ–≤–µ–∫?\n"
            "–®—É—á—É :)\n\n–î–≤–∞–π—Ç–µ —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ –±–µ–∑ –æ—à–∏–±–æ–∫ –≤–≤–µ–¥–µ–º API –∫–ª—é—á –¥–ª—è –±–æ–µ–≤–æ–≥–æ –±–æ—Ç–∞:"
        )
    else:
        error = result["description"]
        text = (
            f"–í–∞—à —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error}\n\n"
            "–ï—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ API –∫–ª—é—á –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
    send_message(message.chat.id, text)


def create_supervisor(message: Message, context):
    supervisor = Supervisor()
    user = message.from_user

    if user.first_name and user.last_name:
        supervisor.name = f"{user.first_name} {user.last_name}"

    if user.username:
        supervisor.telegram_nickname = user.username
    else:
        supervisor.telegram_nickname = "<unknown>"

    supervisor.telegram_id = user.telegram_id
    supervisor.phone = user.phone_number

    supervisor.save()
    context["data"]["supervisor"] = supervisor
    send_message(message.chat.id, "–¢–∞–∫... –í—Å–µ, —è —Ç–µ–±—è –∑–∞–ø–º–Ω–∏–ª...")

    create_project(message, context)


def find_supervisor(user_id: int) -> Supervisor | None:
    return Supervisor.objects.filter(telegram_id=user_id).first()


def check_token(token):
    request_url = f"{telegram_api_url}{token}/getMe"
    return requests.get(request_url, timeout=5).json()


def create_project(message, context):
    data = context["data"]
    supervisor = data["supervisor"]
    testbot_token = data["testbot_token"]
    prodbot_token = data["prodbot_token"]

    project = Project()
    project.owner = supervisor
    project.dev_telegram_key = testbot_token
    project.prod_telegram_key = prodbot_token
    project.save()
    data["project"] = project

    send_message(
        message.chat.id, "–£—Ñ—Ñ... –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–µ–∫—Ç...\n\n–ï—â—ë —á—É—Ç—å-—á—É—Ç—å!"
    )

    errors = []

    testbot = create_bot(testbot_token, context, "dev")
    if testbot:
        update_bot_info(testbot)
        res = register_webhook(testbot)
        if not res["ok"]:
            errors.append(f"Register test bot webhook error: {res['error']}")
    else:
        errors.append("Create test bot error.")

    prodbot = create_bot(prodbot_token, context, "prod")
    if prodbot:
        update_bot_info(prodbot)
        res = register_webhook(prodbot)
        if not res["ok"]:
            errors.append(f"Register prod bot webhook error: {res['error']}")
    else:
        errors.append("Create prod bot error.")

    if errors:
        send_message(
            message.chat.id, f"–ù–µ —Å–º–æ–≥ —è... –Ω–µ —Å–º–æ–≥...\n–û—à–∏–±–∫–∏\n{'. '.join(errors)}"
        )
    else:
        send_message(
            message.chat.id,
            "–¢–≤–æ–∏ –±–æ—Ç—ã –≥–æ—Ç–æ–≤—ã! –ò –¥–∞–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ò—Å–ø—ã—Ç–∞–π –∏—Ö –≤ –¥–µ–ª–µ, –≤–æ—Ç —Å—Å—ã–ª–∫–∏:",
        )
        send_message(message.chat.id, f"–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç: https://t.me/{testbot.username}")
        send_message(message.chat.id, f"–ë–æ–µ–≤–æ–π –±–æ—Ç: https://t.me/{prodbot.username}")

        text = (
            "–ü–æ–∫–∞ –æ–Ω–∏ –Ω–µ —Ç–∞–∫–∏–µ —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ, –∫–∞–∫ —è, –∏ —É–º–µ—é—Ç –≤—Å–µ–≥–æ-–ª–∏—à—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å "
            "—Ç–µ–∫—Å—Ç –∑–∞ —Ç–æ–±–æ–π. –ê —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è - –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏—Ö –æ–±—É—á–µ–Ω–∏—é!"
        )
        send_message(message.chat.id, text=text)


def register_webhook(bot):
    project_id = bot.project.pk
    bot_id = bot.pk
    request_url = f"{telegram_api_url}{bot.telegram_key}"
    webhook_url = f"{base_hook_url}/hub/projects/{project_id}/{bot_id}/"
    request = f"{request_url}/setWebhook?url={webhook_url}"
    response = requests.post(request, timeout=5).json()
    if response["ok"] and response["result"]:
        bot.is_webhook_set = True
        bot.save()
        return {"ok": True}
    return {"ok": False, "error": response["description"]}


def update_bot_info(bot):
    request_url = f"{telegram_api_url}{bot.telegram_key}/getMe"
    response = requests.get(request_url, timeout=5).json()
    if response["ok"]:
        data = response["result"]
        bot.username = data["username"]
        bot.name = data["first_name"]
        bot.save()


def create_bot(token, context, bot_type):
    bot = TelegramBot()
    bot.bot_type = bot_type
    bot.telegram_key = token
    bot.project = context["data"]["project"]
    bot.save()
    return bot


def get_bot_context(token):
    if token in context:
        return context[token]

    bot_context = {}
    context[token] = bot_context
    return bot_context


def get_context(message):
    bot_context = get_bot_context(master_bot_telegram_token)
    chat_id = message.chat.id
    if chat_id in bot_context:
        return bot_context[chat_id]

    chat_context = {}
    chat_context["state"] = "default"
    chat_context["data"] = {}
    bot_context[chat_id] = chat_context
    return chat_context


states = collections.defaultdict(lambda: process_unknown_state)
states["waiting_phone_number"] = process_waiting_phone_number_state
states["waiting_name"] = process_waiting_name_state
states["waiting_testbot_token"] = process_waiting_testbot_token
states["waiting_prodbot_token"] = process_waiting_prodbot_token
